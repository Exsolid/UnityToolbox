
BEGIN_OPTIONS

END_OPTIONS

BEGIN_PROPERTIES
END_PROPERTIES

BEGIN_CBUFFER

	const static int maxLayerCount = 8;
	const static float epsilon = 1E-4;

	float minHeight;
	float maxHeight;		

	int layerCount;

	float3 baseColors[maxLayerCount];
	float baseColorStrengths[maxLayerCount];

	float baseStartHeights[maxLayerCount];
	float baseTextureScales[maxLayerCount];

	float baseBlends[maxLayerCount];

	UNITY_DECLARE_TEX2DARRAY(baseTextures);
END_CBUFFER


BEGIN_CODE

	float inverseLerp(float a, float b, float value) {
		return saturate((value-a)/(b-a));
	}

	float3 triplanarTexture(float3 worldPos, float scale, float3 blendAxes, int textureIndex)
	{
		float3 scaledWorldPos = worldPos/scale;
		float3 xProjection = UNITY_SAMPLE_TEX2DARRAY(baseTextures, float3(scaledWorldPos.y, scaledWorldPos.z, textureIndex)) * blendAxes.x;
		float3 yProjection = UNITY_SAMPLE_TEX2DARRAY(baseTextures, float3(scaledWorldPos.z, scaledWorldPos.x, textureIndex)) * blendAxes.y;
		float3 zProjection = UNITY_SAMPLE_TEX2DARRAY(baseTextures, float3(scaledWorldPos.x, scaledWorldPos.y, textureIndex)) * blendAxes.z;
		return xProjection + yProjection + zProjection;
	}

	void SurfaceFunction(inout Surface o, ShaderData d)
	{
		float heightPercent = inverseLerp(minHeight,maxHeight, d.worldSpacePosition.y);
		float3 blendAxes = abs(d.worldSpaceNormal);
		blendAxes /= blendAxes.x + blendAxes.y + blendAxes.z;

		for (int i = 0; i < layerCount; i ++) {
			float drawStrength = inverseLerp(-baseBlends[i]/2 - epsilon, baseBlends[i]/2, heightPercent - baseStartHeights[i]);

			float3 baseColor = baseColors[i] * baseColorStrengths[i];
			float3 baseTexture = triplanarTexture(d.worldSpacePosition, baseTextureScales[i], blendAxes, i) * (1-baseColorStrengths[i]);

			o.Albedo = o.Albedo * (1-drawStrength) + (baseTexture*0.5f + baseColor) * drawStrength;
		}
	}

END_CODE

